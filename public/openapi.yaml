openapi: 3.0.0
info:
  title: SketchShifter API
  description: |
    SketchShifter バックエンドAPIの仕様書（成功レスポンスのみ）

    ## 認証について
    認証が必要なエンドポイントには、AuthorizationヘッダーにJWTトークンを含める必要があります。
    Format: `Bearer {token}`

    ## 基本URL
    本番: `https://api.serendicode-sub.click/`
    開発: `http://localhost:8080/`
  version: 1.0.0

servers:
  - url: https://api.serendicode-sub.click/
    description: 本番環境
  - url: http://localhost:8080/
    description: 開発環境

tags:
  - name: health
    description: システムヘルスチェック
  - name: auth
    description: 認証・認可
  - name: users
    description: ユーザー管理
  - name: works
    description: 作品管理
  - name: tags
    description: タグ管理
  - name: comments
    description: コメント管理
  - name: projects
    description: プロジェクト管理
  - name: tasks
    description: タスク管理
  - name: votes
    description: 投票管理

paths:
  /health:
    get:
      tags:
        - health
      summary: ヘルスチェック
      operationId: healthCheck
      responses:
        '200':
          description: 正常に動作している
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /auth/register:
    post:
      tags:
        - auth
      summary: ユーザー登録
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      tags:
        - auth
      summary: ログイン
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/me:
    get:
      tags:
        - auth
      summary: 自分のユーザー情報を取得
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/change-password:
    post:
      tags:
        - auth
      summary: パスワード変更
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: パスワード変更成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /users/{id}:
    get:
      tags:
        - users
      summary: ユーザー情報を取得
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}/works:
    get:
      tags:
        - users
      summary: ユーザーの作品一覧を取得
      operationId: getUserWorks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkListResponse'

  /users/profile:
    put:
      tags:
        - users
      summary: プロフィールを更新
      operationId: updateProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /works:
    get:
      tags:
        - works
      summary: 作品一覧を取得
      operationId: getWorks
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - name: search
          in: query
          description: 検索キーワード
          schema:
            type: string
        - name: tag
          in: query
          description: タグでフィルタリング
          schema:
            type: string
        - name: user_id
          in: query
          description: ユーザーIDでフィルタリング
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          description: ソート順
          schema:
            type: string
            enum: [newest, popular, likes]
            default: newest
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkListResponse'

    post:
      tags:
        - works
      summary: 作品を作成
      operationId: createWork
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  work:
                    $ref: '#/components/schemas/Work'

  /works/{id}:
    get:
      tags:
        - works
      summary: 作品を取得
      operationId: getWorkById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  work:
                    $ref: '#/components/schemas/Work'

    put:
      tags:
        - works
      summary: 作品を更新
      operationId: updateWork
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  work:
                    $ref: '#/components/schemas/Work'

    delete:
      tags:
        - works
      summary: 作品を削除
      operationId: deleteWork
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /works/{id}/like:
    post:
      tags:
        - works
      summary: いいねを追加
      operationId: addLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: いいね追加成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  likes_count:
                    type: integer
                    description: 現在のいいね数

    delete:
      tags:
        - works
      summary: いいねを削除
      operationId: removeLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: いいね削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  likes_count:
                    type: integer
                    description: 現在のいいね数

  /works/{id}/liked:
    get:
      tags:
        - works
      summary: いいね状態を確認
      operationId: hasLiked
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    description: いいねしているかどうか

  /works/{id}/comments:
    get:
      tags:
        - comments
      summary: 作品のコメント一覧を取得
      operationId: getWorkComments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

    post:
      tags:
        - comments
      summary: コメントを投稿
      operationId: createComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: コメント投稿成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: '#/components/schemas/Comment'

  /comments/{id}:
    put:
      tags:
        - comments
      summary: コメントを更新
      operationId: updateComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: '#/components/schemas/Comment'

    delete:
      tags:
        - comments
      summary: コメントを削除
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /tags:
    get:
      tags:
        - tags
      summary: タグ一覧を取得
      operationId: getTags
      parameters:
        - name: search
          in: query
          description: 検索キーワード
          schema:
            type: string
        - name: limit
          in: query
          description: 取得する最大件数
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'

  /projects:
    get:
      tags:
        - projects
      summary: プロジェクト一覧を取得
      operationId: getProjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - name: search
          in: query
          description: 検索キーワード
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

    post:
      tags:
        - projects
      summary: プロジェクトを作成
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'

  /projects/my:
    get:
      tags:
        - projects
      summary: 自分が参加しているプロジェクト一覧を取得
      operationId: getMyProjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

  /projects/join:
    post:
      tags:
        - projects
      summary: 招待コードでプロジェクトに参加
      operationId: joinProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinProjectRequest'
      responses:
        '200':
          description: 参加成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'

  /projects/{id}:
    get:
      tags:
        - projects
      summary: プロジェクトを取得
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'

    put:
      tags:
        - projects
      summary: プロジェクトを更新
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'

    delete:
      tags:
        - projects
      summary: プロジェクトを削除
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /projects/{id}/members:
    get:
      tags:
        - projects
      summary: プロジェクトメンバー一覧を取得
      operationId: getProjectMembers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectMember'

  /projects/{id}/members/{memberID}:
    delete:
      tags:
        - projects
      summary: メンバーをプロジェクトから削除
      operationId: removeProjectMember
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: memberID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /projects/{id}/invitation-code:
    post:
      tags:
        - projects
      summary: 招待コードを生成
      operationId: generateInvitationCode
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 生成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  invitation_code:
                    type: string
                    description: 新しい招待コード

  /tasks:
    post:
      tags:
        - tasks
      summary: タスクを作成
      operationId: createTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: タスクを取得
      operationId: getTaskById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'

    put:
      tags:
        - tasks
      summary: タスクを更新
      operationId: updateTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'

    delete:
      tags:
        - tasks
      summary: タスクを削除
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /tasks/project/{projectID}:
    get:
      tags:
        - tasks
      summary: プロジェクトのタスク一覧を取得
      operationId: getProjectTasks
      security:
        - bearerAuth: []
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'

  /tasks/{id}/works:
    get:
      tags:
        - tasks
      summary: タスクの作品一覧を取得
      operationId: getTaskWorks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkListResponse'

    post:
      tags:
        - tasks
      summary: 作品をタスクに追加
      operationId: addWorkToTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWorkToTaskRequest'
      responses:
        '204':
          description: 追加成功

  /tasks/{id}/works/{workID}:
    delete:
      tags:
        - tasks
      summary: 作品をタスクから削除
      operationId: removeWorkFromTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: workID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /tasks/orders:
    put:
      tags:
        - tasks
      summary: タスクの表示順序を更新
      operationId: updateTaskOrders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskOrdersRequest'
      responses:
        '204':
          description: 更新成功

  /votes:
    post:
      tags:
        - votes
      summary: 投票を作成
      operationId: createVote
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVoteRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  vote:
                    $ref: '#/components/schemas/Vote'

  /votes/{id}:
    get:
      tags:
        - votes
      summary: 投票を取得
      operationId: getVoteById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  vote:
                    $ref: '#/components/schemas/Vote'

    put:
      tags:
        - votes
      summary: 投票を更新
      operationId: updateVote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVoteRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  vote:
                    $ref: '#/components/schemas/Vote'

    delete:
      tags:
        - votes
      summary: 投票を削除
      operationId: deleteVote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /votes/task/{taskID}:
    get:
      tags:
        - votes
      summary: タスクの投票一覧を取得
      operationId: getTaskVotes
      security:
        - bearerAuth: []
      parameters:
        - name: taskID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vote'

  /votes/{id}/options:
    post:
      tags:
        - votes
      summary: 投票オプションを追加
      operationId: addVoteOption
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddVoteOptionRequest'
      responses:
        '201':
          description: 追加成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  option:
                    $ref: '#/components/schemas/VoteOption'

  /votes/{id}/options/{optionID}:
    delete:
      tags:
        - votes
      summary: 投票オプションを削除
      operationId: deleteVoteOption
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: optionID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功

  /votes/{id}/vote:
    post:
      tags:
        - votes
      summary: 投票する
      operationId: castVote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CastVoteRequest'
      responses:
        '204':
          description: 投票成功

  /votes/{id}/vote/{optionID}:
    delete:
      tags:
        - votes
      summary: 投票を取り消す
      operationId: removeVote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: optionID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 取り消し成功

  /votes/{id}/user-votes:
    get:
      tags:
        - votes
      summary: ユーザーの投票を取得
      operationId: getUserVotes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    items:
                      $ref: '#/components/schemas/VoteResponse'

  /votes/{id}/close:
    post:
      tags:
        - votes
      summary: 投票を終了
      operationId: closeVote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 終了成功

  /debug/routes:
    get:
      tags:
        - debug
      summary: 登録されているルートを取得
      operationId: getDebugRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: ルート数
                  routes:
                    type: array
                    items:
                      type: object
                      properties:
                        method:
                          type: string
                          description: HTTPメソッド
                        path:
                          type: string
                          description: ルートパス

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWTトークンを使用した認証

  parameters:
    pageParam:
      name: page
      in: query
      description: ページ番号
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    limitParam:
      name: limit
      in: query
      description: 1ページあたりの件数
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: メッセージ

    HealthStatus:
      type: object
      required:
        - status
        - uptime
        - timestamp
        - version
      properties:
        status:
          type: string
          description: システムステータス
          example: ok
        uptime:
          type: string
          description: 起動からの時間
          example: 2h30m15s
        timestamp:
          type: string
          format: date-time
          description: 現在時刻
        version:
          type: string
          description: バージョン
          example: '1.0.0'

    User:
      type: object
      required:
        - id
        - email
        - name
        - nickname
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーID
        email:
          type: string
          format: email
          description: メールアドレス
        name:
          type: string
          description: 名前
        nickname:
          type: string
          description: ニックネーム
        bio:
          type: string
          nullable: true
          description: 自己紹介
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
        - nickname
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
        password:
          type: string
          format: password
          minLength: 6
          description: パスワード（6文字以上）
        name:
          type: string
          description: 名前
        nickname:
          type: string
          description: ニックネーム

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
        password:
          type: string
          format: password
          description: パスワード

    PasswordChangeRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          format: password
          description: 現在のパスワード
        new_password:
          type: string
          format: password
          minLength: 6
          description: 新しいパスワード（6文字以上）

    AuthResponse:
      type: object
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWTトークン

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          description: 名前
        nickname:
          type: string
          description: ニックネーム
        bio:
          type: string
          description: 自己紹介

    Tag:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: タグID
        name:
          type: string
          description: タグ名
        created_at:
          type: string
          format: date-time
          description: 作成日時

    Work:
      type: object
      required:
        - id
        - title
        - user_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: 作品ID
        title:
          type: string
          description: タイトル
        description:
          type: string
          nullable: true
          description: 説明
        pde_content:
          type: string
          description: PDEコード
        js_content:
          type: string
          nullable: true
          description: 変換されたJavaScriptコード
        thumbnail_url:
          type: string
          nullable: true
          description: サムネイルURL
        thumbnail_type:
          type: string
          nullable: true
          description: サムネイルのMIMEタイプ
        code_shared:
          type: boolean
          description: コードを公開するかどうか
        views:
          type: integer
          description: 閲覧数
        user_id:
          type: integer
          format: int64
          description: 作成者のユーザーID
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        user:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        likes_count:
          type: integer
          format: int64
          description: いいね数
        comments_count:
          type: integer
          format: int64
          description: コメント数

    CreateWorkRequest:
      type: object
      required:
        - title
        - pde_content
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明
        pde_content:
          type: string
          description: PDEコード
        thumbnail_url:
          type: string
          description: サムネイル画像のURL
        code_shared:
          type: boolean
          default: false
          description: コードを公開するかどうか
        tags:
          type: string
          description: カンマ区切りのタグリスト

    UpdateWorkRequest:
      type: object
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明
        pde_content:
          type: string
          description: PDEコード
        thumbnail_url:
          type: string
          description: サムネイル画像のURL
        code_shared:
          type: boolean
          description: コードを公開するかどうか
        tags:
          type: string
          description: カンマ区切りのタグリスト

    WorkListResponse:
      type: object
      required:
        - works
        - total
        - pages
        - page
      properties:
        works:
          type: array
          items:
            $ref: '#/components/schemas/Work'
        total:
          type: integer
          format: int64
          description: 総件数
        pages:
          type: integer
          description: 総ページ数
        page:
          type: integer
          description: 現在のページ

    Comment:
      type: object
      required:
        - id
        - content
        - work_id
        - user_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: コメントID
        content:
          type: string
          description: コメント内容
        work_id:
          type: integer
          format: int64
          description: 作品ID
        user_id:
          type: integer
          format: int64
          description: 投稿者のユーザーID
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        user:
          $ref: '#/components/schemas/User'

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: コメント内容

    UpdateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: コメント内容

    CommentListResponse:
      type: object
      required:
        - comments
        - total
        - pages
        - page
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        total:
          type: integer
          format: int64
          description: 総件数
        pages:
          type: integer
          description: 総ページ数
        page:
          type: integer
          description: 現在のページ

    Project:
      type: object
      required:
        - id
        - title
        - owner_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: プロジェクトID
        title:
          type: string
          description: タイトル
        description:
          type: string
          nullable: true
          description: 説明
        invitation_code:
          type: string
          description: 招待コード
        owner_id:
          type: integer
          format: int64
          description: オーナーのユーザーID
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        owner:
          $ref: '#/components/schemas/User'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'

    CreateProjectRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明

    UpdateProjectRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明

    JoinProjectRequest:
      type: object
      required:
        - invitation_code
      properties:
        invitation_code:
          type: string
          description: 招待コード

    ProjectMember:
      type: object
      required:
        - project_id
        - user_id
        - is_owner
        - joined_at
      properties:
        project_id:
          type: integer
          format: int64
          description: プロジェクトID
        user_id:
          type: integer
          format: int64
          description: ユーザーID
        is_owner:
          type: boolean
          description: オーナーかどうか
        joined_at:
          type: string
          format: date-time
          description: 参加日時
        user:
          $ref: '#/components/schemas/User'

    ProjectListResponse:
      type: object
      required:
        - projects
        - total
        - pages
        - page
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        total:
          type: integer
          format: int64
          description: 総件数
        pages:
          type: integer
          description: 総ページ数
        page:
          type: integer
          description: 現在のページ

    Task:
      type: object
      required:
        - id
        - title
        - project_id
        - order_index
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: タスクID
        title:
          type: string
          description: タイトル
        description:
          type: string
          nullable: true
          description: 説明
        project_id:
          type: integer
          format: int64
          description: プロジェクトID
        order_index:
          type: integer
          description: 表示順序
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        works:
          type: array
          items:
            $ref: '#/components/schemas/Work'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'

    CreateTaskRequest:
      type: object
      required:
        - title
        - project_id
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明
        project_id:
          type: integer
          format: int64
          description: プロジェクトID

    UpdateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明

    AddWorkToTaskRequest:
      type: object
      required:
        - work_id
      properties:
        work_id:
          type: integer
          format: int64
          description: 作品ID

    UpdateTaskOrdersRequest:
      type: object
      required:
        - task_ids
        - order_indices
      properties:
        task_ids:
          type: array
          items:
            type: integer
            format: int64
          description: タスクIDの配列
        order_indices:
          type: array
          items:
            type: integer
          description: 新しい順序インデックスの配列

    Vote:
      type: object
      required:
        - id
        - title
        - task_id
        - multi_select
        - is_active
        - created_by
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: 投票ID
        title:
          type: string
          description: タイトル
        description:
          type: string
          nullable: true
          description: 説明
        task_id:
          type: integer
          format: int64
          description: タスクID
        multi_select:
          type: boolean
          description: 複数選択可能かどうか
        is_active:
          type: boolean
          description: アクティブかどうか
        created_by:
          type: integer
          format: int64
          description: 作成者のユーザーID
        created_at:
          type: string
          format: date-time
          description: 作成日時
        updated_at:
          type: string
          format: date-time
          description: 更新日時
        closed_at:
          type: string
          format: date-time
          nullable: true
          description: 終了日時
        creator:
          $ref: '#/components/schemas/User'
        options:
          type: array
          items:
            $ref: '#/components/schemas/VoteOption'

    CreateVoteRequest:
      type: object
      required:
        - title
        - task_id
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明
        task_id:
          type: integer
          format: int64
          description: タスクID
        multi_select:
          type: boolean
          default: false
          description: 複数選択可能かどうか

    UpdateVoteRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: タイトル
        description:
          type: string
          description: 説明
        multi_select:
          type: boolean
          description: 複数選択可能かどうか

    VoteOption:
      type: object
      required:
        - id
        - vote_id
        - option_text
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: オプションID
        vote_id:
          type: integer
          format: int64
          description: 投票ID
        option_text:
          type: string
          description: オプションテキスト
        work_id:
          type: integer
          format: int64
          nullable: true
          description: 関連作品ID
        created_at:
          type: string
          format: date-time
          description: 作成日時
        work:
          allOf:
            - $ref: '#/components/schemas/Work'
          nullable: true
        vote_count:
          type: integer
          format: int64
          description: 投票数

    AddVoteOptionRequest:
      type: object
      required:
        - option_text
      properties:
        option_text:
          type: string
          description: オプションテキスト
        work_id:
          type: integer
          format: int64
          nullable: true
          description: 関連作品ID

    CastVoteRequest:
      type: object
      required:
        - option_id
      properties:
        option_id:
          type: integer
          format: int64
          description: オプションID

    VoteResponse:
      type: object
      required:
        - id
        - vote_id
        - option_id
        - user_id
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 投票回答ID
        vote_id:
          type: integer
          format: int64
          description: 投票ID
        option_id:
          type: integer
          format: int64
          description: オプションID
        user_id:
          type: integer
          format: int64
          description: ユーザーID
        created_at:
          type: string
          format: date-time
          description: 投票日時
        user:
          $ref: '#/components/schemas/User'
